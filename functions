
# Colours
# * styles: 0 (standard), 1 (bold), 2 (low intensity), 4 (underline), 5 (blinking), 8 (invisible), 9 (strikethrough)
BLACK="\033[0;30m"
RED="\033[0;31m"
RED_BOLD="\033[1;31m"
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
GREY="\033[0;37m"
RESET="\033[0;0m"

info() { echo -e "${BLUE}${*}${RESET}"; }
warning() { echo -e "${PURPLE}${*}${RESET}"; }
error() { echo -e "${RED_BOLD}${*}${RESET}"; }

TARGET_PYTHON_MAJOR=3
TARGET_PYTHON_MINOR=9
PYTHON_VERSION=${TARGET_PYTHON_MAJOR}.${TARGET_PYTHON_MINOR}

deducePythonVersion() {  
  PYTHON_MATCH=no
  for p in python python${TARGET_PYTHON_MAJOR} python${PYTHON_VERSION}; do
    if hash $p 2>/dev/null; then
      export PYTHON=$p
      if test ${PYTHON_VERSION} == $($p -V | cut -d ' ' -f 2 | cut -d '.' -f -2); then
        export PYTHON_MATCH=yes
        break
      fi
    fi
  done
  if [ "${PYTHON_MATCH}" != "yes" ]; then
    if test -n "${PYTHON}"; then
      warning "WARNING: can't find python ${PYTHON_VERSION}. Using the best alternative found..."
    else
      error "ERROR: can't find python ${PYTHON_VERSION}. Aborting..."
      return 1
    fi
  fi
  return 0
}

optionalClean() {
  if [[ "$*" == *"--clean"* ]]; then
    warning "Clean: removing existing venv"
    rm -rf venv
  else
    if test -d venv; then info "Using existing venv in directory $PWD/venv\n  -> Use option --clean to create a fresh environment"; fi
  fi
}

_createVenv() {
  if test ! -d venv; then
    info "Creating venv with python - $(which $PYTHON)"
    $PYTHON -m venv venv \
      && source venv/bin/activate \
      && python -m pip install --no-cache-dir -U pip

    installPycrypto

    info "Installing JupyterLab and workshop dependencies"
    source venv/bin/activate \
      && pip install --no-cache-dir -U setuptools \
      && pip install --no-cache-dir -U wheel \
      && pip install --no-cache-dir -U jupyterlab \
      && pip install --no-cache-dir -U -r workshop/requirements.txt
  else
    info "Using existing venv - $PWD/venv"
    source venv/bin/activate
  fi
}

createVenv() {
  optionalClean "$@"
  if deducePythonVersion; then
    _createVenv
  fi
}

installPycrypto() {
  info "Install pycrypto with setuptools<58"
  source venv/bin/activate \
    && pip cache purge 2>/dev/null \
    && pip uninstall -y wheel 2>/dev/null \
    && pip uninstall -y setuptools 2>/dev/null \
    && pip install --no-cache-dir -U 'setuptools<58' \
    && pip install --no-cache-dir -U wheel \
    && pip install --no-cache-dir -U pycrypto \
    && pip cache purge 2>/dev/null \
    && pip uninstall -y wheel \
    && pip uninstall -y setuptools
}

startJupyterLab() {
  createVenv "$@"
  jupyter-lab --ServerApp.root_dir workshop --NotebookApp.token=\'\' --no-browser --ip=0.0.0.0
}
