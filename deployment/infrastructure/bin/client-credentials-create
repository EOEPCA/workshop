#!/usr/bin/env bash

ORIG_DIR="$(pwd)"
cd "$(dirname "$0")"
BIN_DIR="$(pwd)"

onExit() {
  cd "${ORIG_DIR}"
}

trap onExit EXIT

main() {
  processArgs "$@"
  createClientSecret
}

usage() {
  echo "Usage:"
  echo "./$(basename $0) [options]"
  echo " "
  echo "options                                     | Required | Default | Description"
  echo "-h, --help                                  | false    | N/A     | Show this description"
  echo "-n, --namespace <namespace>                 | true     |         | The namespace in which to store the client crential secrets in"
  echo "-c, --client <client name>                  | true     |         | The name of the client"
  echo "-f, --client_file <client credentials path> | true     |         | Path to a file containing the client credentials e.g. client.yaml"
  echo
}

setDefaults() {
  auth_server="auth.workshop.eoepca.org"
}

processArgs() {
  setDefaults

  while [ $# -gt 0 ]; do
    case "$1" in
      "-n" | "--namespace")
        shift
        namespace="${1}"
        ;;
      "-c" | "--client")
        shift
        client_name="${1}"
        ;;
      "-f" | "--client_file")
        shift
        client_file="${1}"
        ;;
      "-h" | "--help")
        usage
        exit 0
        ;;
      *)
        echo "ERROR: Invalid argument ${1}" 1>&2
        usage
        exit 1
        ;;
    esac
    shift
  done

  validateArgs
}

validateArgs() {
  if [ -z "${namespace}" ]; then
    echo "ERROR: namespace must be set"
    usage
    exit 1
  fi
  if [ -z "${client_name}" ]; then
    echo "ERROR: client must be set"
    usage
    exit 1
  fi
  if [ -z "${client_file}" ]; then
    echo "ERROR: client_file must be set"
    usage
    exit 1
  fi
}

secretYaml() {
  kubectl -n "${1}" create secret generic "${client_name}-uma-user-agent" \
    --from-file=${client_file} \
    --dry-run=client -o yaml
}

createClientSecret() {
  CREDS_FILE="${client_name}-client-credentials.yaml"
  > ${CREDS_FILE}
  for namespaceRequiringCreds in ${namespace}
  do
    echo --- >> ${CREDS_FILE}
    # Create Secret and then pipe to kubeseal to create the SealedSecret
    secretYaml ${namespaceRequiringCreds} | kubeseal -o yaml \
      --controller-name sealed-secrets-controller \
      --controller-namespace eoepca-system >> ${CREDS_FILE}
  done
}

main "$@"