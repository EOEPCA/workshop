#!/usr/bin/env bash

ORIG_DIR="$(pwd)"
cd "$(dirname "$0")"
BIN_DIR="$(pwd)"

onExit() {
  cd "${ORIG_DIR}"
}

trap onExit EXIT

main() {
  processArgs "$@"
  createClientSecret
}

usage() {
  echo "Usage:"
  echo "./$(basename $0) [options]"
  echo " "
  echo "options                                     | Required | Default | Description"
  echo "-h, --help                                  | false    | N/A     | Show this description"
  echo "-f, --client_file <client credentials path> | true     |         | Path to a file containing the client credentials e.g. client.yaml"
  echo
}

setDefaults() {
  auth_server="auth.workshop.eoepca.org"
}

processArgs() {
  setDefaults

  while [ $# -gt 0 ]; do
    case "$1" in
      "-f" | "--client_file")
        shift
        client_file="${1}"
        ;;
      "-h" | "--help")
        usage
        exit 0
        ;;
      *)
        echo "ERROR: Invalid argument ${1}" 1>&2
        usage
        exit 1
        ;;
    esac
    shift
  done

  validateArgs
}

validateArgs() {
  if [ -z "${client_file}" ]; then
    echo "ERROR: client_file must be set"
    usage
    exit 1
  fi
}

secretYaml() {
  kubectl -n "${1}" create secret generic "${SECRET_NAME}" \
    --from-literal=JUPYTERHUB_CRYPT_KEY="$(openssl rand -hex 32)" \
    --from-literal=OAUTH_CLIENT_ID="$(cat ${client_file} | grep client-id | cut -d\  -f2)" \
    --from-literal=OAUTH_CLIENT_SECRET="$(cat ${client_file} | grep client-secret | cut -d\  -f2)" \
    --dry-run=client -o yaml
}

createClientSecret() {
  > ${CREDS_FILE}
  for namespaceRequiringCreds in proc
  do
    echo --- >> ${CREDS_FILE}
    # Create Secret and then pipe to kubeseal to create the SealedSecret
    secretYaml ${namespaceRequiringCreds} | kubeseal -o yaml \
      --controller-name sealed-secrets-controller \
      --controller-namespace eoepca-system >> ${CREDS_FILE}
  done
}

APP_NAME="jupyterhub"
CREDS_FILE="${APP_NAME}-client-credentials.yaml"
SECRET_NAME="${APP_NAME}-secrets"

main "$@"