apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vs
spec:
  interval: 5m
  chart:
    spec:
      chart: data-access
      version: 2.3.3
      sourceRef:
        kind: HelmRepository
        name: eoepca
        namespace: eoepca-system
  values:
    global:
      env:
        REGISTRAR_REPLACE: "true"
        CPL_VSIL_CURL_ALLOWED_EXTENSIONS: .TIF,.tif,.xml,.jp2,.jpg,.jpeg

      ingress:
        enabled: ${enableResourceIngresses}
        annotations:
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          cert-manager.io/cluster-issuer: ${certificateIssuer}
        hosts:
          - host: data-access.subpath.workshop.eoepca.org
        tls:
          - hosts:
              - data-access.subpath.workshop.eoepca.org
        prefix:
          enabled: true
          value: "{{ workspace_name }}"

      storage:
        data:
          # Storage details for data source
          data:
            # TODO: this values are secret pass them as secret
            type: "S3"
            endpoint_url: https://cf2.cloudferro.com:8080
            access_key_id: {{ access_key_id }}
            secret_access_key: {{ secret_access_key }}
            bucket: {{ bucket }}
            region_name: RegionOne
            validate_bucket_name: false

        # Object storage for data access cache
        cache: {}
          # type: S3
          # endpoint_url: "https://cf2.cloudferro.com:8080/cache-bucket"
          # host: "cf2.cloudferro.com:8080"
          # region_name: RegionOne
          # region: RegionOne
          # bucket: cache-bucket

      # Service metadata
      metadata:
        title: Data Access Service - {{ workspace_name }}

    vs:
      renderer:
        replicaCount: 1
        ingress:
          enabled: ${enableResourceIngresses}
          hosts:
          - host: data-access.subpath.workshop.eoepca.org

      registrar:
        replicaCount: 1
        image:
          tag: "latest"
          pullPolicy: Always
        config:
          disableDefaultRoute: true
          routes:
            items:
              path: registrar.route.stac.ItemRoute
              queue: register_queue
              replace: true
              backends:
                - path: "registrar.backend.eoxserver.ItemBackend"
                  kwargs:
                    instance_base_path: "/var/www/pvs/dev"
                    instance_name: "pvs_instance"
                    product_types: []
                    auto_create_product_types: True
                - path: "registrar_pycsw.backend.ItemBackend"
                  kwargs:
                    repository_database_uri: "postgresql://postgres:mypass@resource-catalogue-db/pycsw"
                    ows_url: "https://data-access.{{ workspace_name }}.workshop.eoepca.org/ows"
                    public_s3_url: "https://cf2.cloudferro.com:8080/{{ projectid }}:{{ bucket }}"
            collections:
              path: registrar.route.stac.CollectionRoute
              queue: register_collection_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.CollectionBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            ades:
              path: registrar.route.json.JSONRoute
              queue: register_ades_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.ADESBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            application:
              path: registrar.route.json.JSONRoute
              queue: register_application_queue
              replace: true
              kwargs:
                href_field: url
              backends:
                - path: registrar_pycsw.backend.CWLBackend
                  kwargs:
                    repository_database_uri: "postgresql://postgres:mypass@resource-catalogue-db/pycsw"
                    ows_url: "https://data-access.{{ workspace_name }}.workshop.eoepca.org/ows"
                    public_s3_url: "https://cf2.cloudferro.com:8080/{{ projectid }}:{{ bucket }}"
            catalogue:
              path: registrar.route.json.JSONRoute
              queue: register_catalogue_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.CatalogueBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw

      harvester:
        image:
          tag: "latest"
          pullPolicy: Always
        config:
          redis:
            host: vs-redis-master
            port: 6379
          harvesters:
            # Static STAC catalogue in the user's bucket storage
            - name: harvest-bucket-catalog
              queue: "register_queue"
              resource:
                type: "STACCatalog"
                source:
                  type: "S3"
                  bucket: bucket
                  access_key_id: {{ access_key_id }}
                  secret_access_key: {{ secret_access_key }}
                  endpoint_url: https://cf2.cloudferro.com:8080
                  region_name: RegionOne
                  validate_bucket_name: False
                  public: False

      client:
        ingress:
          enabled: ${enableResourceIngresses}
          hosts:
          - host: data-access.subpath.workshop.eoepca.org
        config:
          eoxserverDownloadEnabled: true

      database:
        persistence:
          enabled: true
          existingClaim: "" # we want the claim to be generated
          storageClass: managed-nfs-storage
          size: "100Gi"

      redis:
        usePassword: false
        persistence:
          existingClaim: "" # we want the claim to be generated
        master:
          persistence:
            existingClaim: "" # we want the claim to be generated
            storageClass: managed-nfs-storage
            size: "1Gi"
        cluster:
          enabled: false

      ingestor:
        replicaCount: 0
        ingress:
          enabled: false  # doesn't support subpaths yet
          hosts:
          - host: data-access.subpath.workshop.eoepca.org


      preprocessor:
        replicaCount: 0

      cache:
        ingress:
          enabled: ${enableResourceIngresses}
          hosts:
          - host: data-access.subpath.workshop.eoepca.org



      seeder:
        config:
          minzoom: 0
          maxzoom: 6  # restrict to only 6 for testing for now
