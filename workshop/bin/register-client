#!/usr/bin/env bash

ORIG_DIR="$(pwd)"
cd "$(dirname "$0")"
BIN_DIR="$(pwd)"

onExit() {
  cd "${ORIG_DIR}"
}
trap onExit EXIT

main() {
  processCmdline "$@"
  checkDocker
  deduceDockerNetwork
  runClient
}

# Process command-line args
processCmdline() {
  if test $# -ge 2; then
    auth_server="$1"
    client_name="$2"
  else
    printMsg "ERROR: not enough args"
    usage
    exit 1
  fi
  if test $# -ge 3; then
    redirect_uri="$3"
  fi
  if test $# -ge 4; then
    logout_uri="$4"
  fi
}

# Check docker is installed
checkDocker() {
  if ! hash docker >/dev/null 2>&1; then
    printMsg "ERROR: docker is required" 1>&2
    exit 1
  fi
}

# Deduce docker network to use
deduceDockerNetwork() {
  # Use minikube network if active
  docker_network=
  # minikube installed?
  if hash minikube >/dev/null 2>&1; then
    # minikube running?
    if minikube status >/dev/null 2>&1; then
      # get current profile which doubles as the network name
      current_profile="$(minikube profile 2>/dev/null | cut -d\  -f2-)"
      if test $?; then
        # check minikube is using the docker driver
        driver=$(minikube profile list -o json | jq -r ".valid[] | select(.Name == \"${current_profile}\") | .Config.Driver")
        if test $?; then
          if test "${driver}" = "docker"; then
            docker_network="--network ${current_profile}"
            printMsg "Using minikube network: ${current_profile}"
          fi
        fi
      fi
    fi
  fi
}

# Run using docker container
runClient() {
  pushd "${ORIG_DIR}" >/dev/null
  docker run --rm ${docker_network} eoepca/client-utils "register-client ${auth_server} \"${client_name}\" ${redirect_uri} ${logout_uri}"
  popd >/dev/null
}

# usage summary
usage() {
  cat - <<EOF 1>&2
Usage:
  $(basename $0) <authorization-server-hostname> <client-name> [<redirect-uri> [<logout-uri>]]
EOF
}

# Write all output to stderr - keeping stdout 'clean' for the client details
printMsg() {
  echo "$@" 1>&2
}

main "$@"
