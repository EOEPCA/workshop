apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vs
spec:
  interval: 5m
  chart:
    spec:
      chart: data-access
      version: 1.3.0-dev2
      sourceRef:
        kind: HelmRepository
        name: eoepca-dev
        namespace: common
  values:
    global:
      env:
        REGISTRAR_REPLACE: "true"
        CPL_VSIL_CURL_ALLOWED_EXTENSIONS: .TIF,.tif,.xml,.jp2,.jpg,.jpeg
        startup_scripts: []

      # the tls host is still needed to provide the hostname for the view server client
      ingress:
        enabled: false
        tls:
          - hosts:
              - data-access.{{ workspace_name }}.185-52-195-215.nip.io

      storage:
        data:
          # Storage details for data source
          data:
            type: "S3"
            endpoint_url: https://minio.185-52-195-215.nip.io
            access_key_id: {{ access_key_id }}
            secret_access_key: {{ secret_access_key }}
            bucket: {{ bucket }}
            region_name: RegionOne
            validate_bucket_name: false

        # Object storage for data access cache
        cache: {}
          # type: "S3"
          # endpoint_url: https://minio.185-52-195-215.nip.io
          # access_key_id: {{ access_key_id }}
          # secret_access_key: {{ secret_access_key }}
          # bucket: {{ bucket }}-cache
          # region_name: RegionOne
          # validate_bucket_name: false

      # Service metadata
      metadata:
        title: Data Access Service - {{ workspace_name }}
        # more - see values for `vs` chart...

      # product types - linked to data assets
      productTypes: []

      # collections - linked to product types
      collections: {}

      # layers for WMS service
      layers: []

    vs:
      renderer:
        replicaCount: 1
        ingress:
          enabled: false
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
          limits:
            memory: 3Gi

      registrar:
        replicaCount: 1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        config:
          disableDefaultRoute: true
          routes:
            items:
              path: registrar.route.stac.ItemRoute
              queue: register_queue
              replace: true
              backends:
                - path: "registrar.backend.eoxserver.ItemBackend"
                  kwargs:
                    instance_base_path: "/var/www/pvs/dev"
                    instance_name: "pvs_instance"
                    product_types: []
                    auto_create_product_types: True
                - path: "registrar_pycsw.backend.ItemBackend"
                  kwargs:
                    repository_database_uri: "postgresql://postgres:mypass@resource-catalogue-db/pycsw"
                    ows_url: "https://data-access.{{ workspace_name }}.185-52-195-215.nip.io/ows"
                    public_s3_url: "https://minio.185-52-195-215.nip.io/{{ bucket }}"
            collections:
              path: registrar.route.stac.CollectionRoute
              queue: register_collection_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.CollectionBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            ades:
              path: registrar.route.json.JSONRoute
              queue: register_ades_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.ADESBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            application:
              path: registrar.route.json.JSONRoute
              queue: register_application_queue
              replace: true
              kwargs:
                href_field: url
              backends:
                - path: registrar_pycsw.backend.CWLBackend
                  kwargs:
                    repository_database_uri: "postgresql://postgres:mypass@resource-catalogue-db/pycsw"
                    ows_url: "https://data-access.{{ workspace_name }}.185-52-195-215.nip.io/ows"
                    public_s3_url: "https://minio.185-52-195-215.nip.io/{{ bucket }}"
            catalogue:
              path: registrar.route.json.JSONRoute
              queue: register_catalogue_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.CatalogueBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw

      harvester:
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        config:
          redis:
            host: vs-redis-master
            port: 6379
          harvesters:
            # Static STAC catalogue in the user's bucket storage
            - name: harvest-bucket-catalog
              queue: "register_queue"
              resource:
                type: "STACCatalog"
                source:
                  type: "S3"
                  endpoint_url: https://minio.185-52-195-215.nip.io
                  access_key_id: {{ access_key_id }}
                  secret_access_key: {{ secret_access_key }}
                  bucket: {{ bucket }}
                  region_name: RegionOne
                  validate_bucket_name: false

      client:
        ingress:
          enabled: false
        config:
          serviceUrl: "//data-access.{{ workspace_name }}.185-52-195-215.nip.io/"
          eoxserverDownloadEnabled: true

      database:
        persistence:
          enabled: true
          existingClaim: "" # we want the claim to be generated
          storageClass: standard
          size: "100Gi"
        # postgresqlTcpKeepalivesInterval: "30"
        # postgresqlTcpKeepalivesIdle: "600"
        # postgresqlTcpKeepalivesCount: "10"
        # postgresqlMaxConnections: "300"

      redis:
        persistence:
          existingClaim: "" # we want the claim to be generated
        master:
          persistence:
            existingClaim: "" # we want the claim to be generated
            storageClass: standard
            size: "1Gi"

      scheduler:
        resources:
          requests:
            cpu: 100m
            memory: 100Mi

      ingestor:
        replicaCount: 0
        ingress:
          enabled: false

      preprocessor:
        replicaCount: 0

      cache:
        replicaCount: 0
        ingress:
          enabled: false

      seeder:
        replicaCount: 0
        config:
          minzoom: 0
          maxzoom: 6  # restrict to only 6 for testing for now
